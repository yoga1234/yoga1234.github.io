{"version":3,"sources":["store/index.js","store/actions/actionTypes.js","components/Form/Form.js","store/actions/todoAction.js","store/actions/noteAction.js","components/List/TextAndForm.js","components/List/List.js","components/NotesList/NotesList.js","App.js","serviceWorker.js","index.js"],"names":["initialStateTodos","todos","initialStateNotes","notes","rootReducer","combineReducers","todoReducer","state","arguments","length","undefined","action","type","Object","objectSpread","concat","toConsumableArray","payload","newTodos","filter","element","index","todo","noteReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Form","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","choice","addTodos","addNotes","onClickChoice","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","onClick","onChange","placeholder","Component","connect","dispatch","addTodo","note","addNote","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","deleteButtonHandler","deleteTodo","cancelButtonHandler","buttonEdit","react","List","console","log","map","key","indexing","List_TextAndForm","NotesList","App","es","components_Form_Form","components_List_List","components_NotesList_NotesList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33b790b9.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport * as actionTypes from './actions/actionTypes';\r\n\r\nconst initialStateTodos = {\r\n  todos: []\r\n}\r\n\r\nconst initialStateNotes = {\r\n  notes: []\r\n}\r\n\r\nconst todoReducer = (state = initialStateTodos, action) => {\r\n  switch(action.type) {\r\n    case actionTypes.ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload]\r\n      }\r\n    case actionTypes.DELETE_TODO:\r\n      let newTodos = state.todos.filter((element, index) => index !== action.payload)\r\n\r\n      return {\r\n        ...state,\r\n        todos: newTodos\r\n      }\r\n    case actionTypes.EDIT_TODO:\r\n      let todos = [...state.todos]\r\n      // ganti data todo\r\n      let index = action.payload.index\r\n      let todo = action.payload.todo\r\n      todos[index] = todo\r\n\r\n      return {\r\n        ...state,\r\n        todos\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst noteReducer = (state = initialStateNotes, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_NOTE:\r\n      return {\r\n        ...state,\r\n        notes: [...state.notes, action.payload]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  todoReducer: todoReducer,\r\n  noteReducer: noteReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store","export const ADD_TODO = 'ADD_TODO';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const ADD_NOTE = 'ADD_NOTE';","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../store/actions/todoAction'\nimport { addNote } from '../../store/actions/noteAction'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    // props addTodos berasal dari mapDispatchToProps\n    if(this.state.choice === 'Todo') {\n      this.props.addTodos(this.state.text)\n    } else {\n      this.props.addNotes(this.state.text)\n    }\n\n    this.setState({ text: '' })\n  }\n\n  onClickChoice = (value) => {\n    this.setState({ choice: value })\n  }\n\n  render () {\n    var styleButtonTodo = '';\n    var styleButtonNotes = '';\n    if(this.state.choice === 'Todo') {\n      styleButtonTodo = 'btn-success';\n    } else {\n      styleButtonNotes = 'btn-success'\n    }\n\n    return (\n      <>\n        <button\n          className={`btn m-2 ${styleButtonTodo}`}\n          onClick={() => this.onClickChoice('Todo')}\n        >\n          Switch to Add Todo\n        </button>\n        <button\n          className={`btn ${styleButtonNotes}`}\n          onClick={() => this.onClickChoice('Notes')}\n        >\n          Switch to Add Notes\n        </button>\n        <p>Add { this.state.choice }</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodos: (todo) => dispatch(addTodo(todo)),\n    addNotes: (note) => dispatch(addNote(note))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Form)","import * as actionTypes from './actionTypes';\r\n\r\nexport const addTodo = (todo) => ({\r\n  type: actionTypes.ADD_TODO, payload: todo\r\n})\r\n\r\nexport const editTodo = (payload) => ({\r\n  type: actionTypes.EDIT_TODO,\r\n  payload: payload\r\n})\r\n\r\nexport const deleteTodo = (index) => ({\r\n  type: actionTypes.DELETE_TODO,\r\n  payload: index\r\n})","import * as actionTypes from './actionTypes';\r\n\r\nexport const addNote = (note) => ({\r\n  type: actionTypes.ADD_NOTE,\r\n  payload: note\r\n})","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { editTodo, deleteTodo } from '../../store/actions/todoAction';\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    editTodo: (index, todo) => dispatch(editTodo({ index, todo})),\r\n    deleteTodo: (index) => dispatch(deleteTodo(index))\r\n  }\r\n}\r\n\r\nclass TextAndForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      viewMode: 'show',\r\n      text: props.todo\r\n    }\r\n  }\r\n\r\n  editButtonHandler = () => {\r\n    this.setState({ viewMode: 'edit' })\r\n  }\r\n\r\n  saveButtonHandler = () => {\r\n    this.props.editTodo(this.props.index, this.state.text)\r\n    this.setState({ viewMode: 'show' });\r\n  }\r\n\r\n  deleteButtonHandler = () => {\r\n    this.props.deleteTodo(this.props.index)\r\n  }\r\n\r\n  cancelButtonHandler = () => {\r\n    this.setState({ viewMode: 'show' })\r\n  }\r\n\r\n  onChangeHandler = (e) => {\r\n    this.setState({ text: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    // default tampilan todo berupa text\r\n    var todo = (\r\n      <p>{this.props.todo}</p>\r\n    )\r\n\r\n    // default tampilan disamping text todo berupa tombol edit\r\n    var buttonEdit = (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={this.editButtonHandler}\r\n      >\r\n        Edit\r\n      </button>\r\n    )\r\n\r\n    // jika viewmode berubah menjadi edit\r\n    if(this.state.viewMode === 'edit') {\r\n      // ganti elemen text todo menjadi form input\r\n      todo = (\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n      )\r\n\r\n      // ganti tombol edit menjadi tombol save dan cancel\r\n      buttonEdit = (\r\n        <Fragment>\r\n          <button\r\n            className=\"btn btn-success\"\r\n            onClick={this.saveButtonHandler}\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            onClick={this.cancelButtonHandler}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </Fragment>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-8\">\r\n          {todo}\r\n        </div>\r\n        <div className=\"col-4\">\r\n          {buttonEdit}\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={this.deleteButtonHandler}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TextAndForm);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport TextAndForm from './TextAndForm';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  }\n}\n\nclass List extends Component {\n\n  deleteHandler(index) {\n    this.props.deleteTodo(index);\n    console.log(index);\n  }\n\n  render (){\n    return (\n      <ul className=\"list-group\">\n        <p>Todo</p>\n        {this.props.todos.map((todo, index) => (\n          <li key={index} indexing={index} className=\"list-group-item\">\n            <TextAndForm\n              todo={todo}\n              index={index}\n            />\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoReducer.todos\n  }\n}\n\n// export default dengan connect\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass NotesList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Notes</p>\r\n        <ul className=\"list-group\">\r\n          {\r\n            this.props.notes.map((note, index) => (\r\n              <li key={index} className=\"list-group-item container\">\r\n                {note}\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notes: state.noteReducer.notes\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(NotesList)","import React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List'\nimport NotesList from './components/NotesList/NotesList'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App container\">\n          <Form/>\n          <List/> \n          <NotesList />       \n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}